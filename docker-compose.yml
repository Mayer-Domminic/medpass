services:
  postgres:
    ports:
      - "5432:5432"
    image: ankane/pgvector:latest            # pgvector pre‑installed
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d  # runs init-pgvector.sql
    networks:
      - medpass

  backend:
    ports:
      - "8000:8000"
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      GEMINI_API_KEYS: ${GEMINI_API_KEYS}
    depends_on:
      - postgres
    networks:
      - medpass

  frontend:
    ports:
      - "3000:3000"
    build:
      context: ./medpass
      dockerfile: Dockerfile
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      - backend
    networks:
      - medpass

  initdb:
    profiles: ["init"]
    build:
      context: ./backend
    env_file:
      - ./.env
    entrypoint: >
      sh -c "
        until pg_isready -h ${POSTGRES_SERVER} -U ${POSTGRES_USER}; do
          echo 'waiting for postgres…'
          sleep 1
        done
        python -m app.scripts.init_db
      "
    depends_on:
      - postgres
    restart: "no"

networks:
  medpass:

volumes:
  postgres_data:
