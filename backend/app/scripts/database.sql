--Rino David Designed
--Exams and Questions Schemas

--Strong Entities (Create First)
CREATE TABLE Exam (
    ExamID INT PRIMARY KEY,
    ExamName VARCHAR(255) NOT NULL,
    ExamDescription VARCHAR(255)
);

CREATE TABLE ContentArea (
    ContentAreaID INT PRIMARY KEY,
    ContentName VARCHAR(255) NOT NULL,
    Description VARCHAR(255),
    Discipline VARCHAR(40)
);

CREATE TABLE Option (
    OptionID INT PRIMARY KEY,
    OptionDescription VARCHAR(255) NOT NULL
);

--Weak Entities (Create Second)
CREATE TABLE Question (
    QuestionID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 10 INCREMENT BY 1) PRIMARY KEY,
    ExamID INT,
    Prompt VARCHAR(255) NOT NULL,
    QuestionDifficulty VARCHAR(40),
	FOREIGN KEY (ExamID) REFERENCES Exam(ExamID)
);

--Intersection Entity (Create Last)
CREATE TABLE QuestionClassification (
    QuestionClassID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    QuestionID INT,
    ContentAreaID INT,
	FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID),
	FOREIGN KEY (ContentAreaID) REFERENCES ContentArea(ContentAreaID)
);

CREATE TABLE QuestionOptions (
    QuestionOptionID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    QuestionID INT,
    OptionID INT,
    CorrectAnswer BIT,
	FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID),
	FOREIGN KEY (OptionID) REFERENCES Option(OptionID)
);

--Student Information and Clerkship/Exam Results Schema

--Strong Entities (Create First)
CREATE TABLE ClassRoster (
    ClassRosterID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    RosterYear DATE NOT NULL,
    InitialRosterAmount INT,
    CurrentEnrollment INT
);

CREATE TABLE LoginInfo (
    LoginInfoID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 10) PRIMARY KEY,
    Username VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(255)
);

--Weak Entities (Create Second)
CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    LoginInfoID INT,
    LastName VARCHAR(40),
    FirstName VARCHAR(40),
    CumGPA FLOAT,
    BcpmGPA FLOAT,
    MMICalc FLOAT,
	FOREIGN KEY (LoginInfoID) REFERENCES LoginInfo(LoginInfoID)
);

CREATE TABLE Extracurriculars (
    ExtracurricularID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    ActivityName VARCHAR(255),
    ActivityDescription VARCHAR(255),
    WeeklyHourCommitment INT,
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID)
);

CREATE TABLE Clerkship (
    ClerkshipID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    ClerkshipName VARCHAR(255) NOT NULL,
    ClerkshipDescription VARCHAR(255),
    StartDate DATE,
    EndDate DATE,
    Company VARCHAR(255),
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID)
);

--Intersection Entities (Do Last)
CREATE TABLE ExamResults (
    ExamResultsID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    ExamID INT,
    ClerkshipID INT,
    Score INT NOT NULL,
    PassOrFail BIT,
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
	FOREIGN KEY (ExamID) REFERENCES Exam(ExamID),
	FOREIGN KEY (ClerkshipID) REFERENCES Clerkship(ClerkshipID)
);

CREATE TABLE StudentQuestionPerformance (
    StudentQuestionPerformanceID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    ExamResultsID INT,
    QuestionID INT,
    Result BIT NOT NULL,
	FOREIGN KEY (ExamResultsID) REFERENCES ExamResults(ExamResultsID),
	FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID)
);

CREATE TABLE GraduationStatus(
    GraduationStatusID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    ClassRosterID INT,
    GraduationYear DATE,
    Graduated BIT,
    GraduationLength INT,
    Status VARCHAR(255),
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
	FOREIGN KEY (ClassRosterID) REFERENCES ClassRoster(ClassRosterID)
);

--Faculty & Class Offerings

--Strong Entities (Do First)
CREATE TABLE Class (
    ClassID INT PRIMARY KEY,
    ClassName VARCHAR(255) NOT NULL,
    ClassDescription VARCHAR(255),
    Block INT
);

--Weak Entities (Do Second)
CREATE TABLE Faculty (
    FacultyID INT PRIMARY KEY,
    LoginInfoID INT,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Position VARCHAR(255),
	FOREIGN KEY (LoginInfoID) REFERENCES LoginInfo(LoginInfoID)
);

CREATE TABLE ClassOffering (
    ClassOfferingID INT PRIMARY KEY,
    FacultyID INT,
    ClassID INT,
    DateTaught DATE,
    Semester VARCHAR(40),
	FOREIGN KEY (FacultyID) REFERENCES Faculty(FacultyID),
	FOREIGN KEY (ClassID) REFERENCES Class(ClassID)
);

CREATE TABLE GradeClassification (
    GradeClassificationID INT PRIMARY KEY,
    ClassOfferingID INT,
    ClassificationName VARCHAR (255) NOT NULL,
    UnitType VARCHAR (50) NOT NULL,
	FOREIGN KEY (ClassOfferingID) REFERENCES ClassOffering(ClassOfferingID)
);


--Intersection Entity (Do Last)
CREATE TABLE EnrollmentRecord (
    EnrollmentRecord INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    ClassOfferingID INT,
    GradePercentage FLOAT,
    PassFailStatus BIT,
    AttendancePercentage FLOAT,
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
	FOREIGN KEY (ClassOfferingID) REFERENCES ClassOffering(ClassOfferingID)
);

CREATE TABLE StudentGrade (
    StudentGradeID INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    StudentID INT,
    GradeClassificationID INT,
    PointsEarned FLOAT,
    PointsAvailable FLOAT,
    DateRecorded DATE,
	FOREIGN KEY (StudentID) REFERENCES Student(StudentID),
	FOREIGN KEY (GradeClassificationID) REFERENCES GradeClassification(GradeClassificationID)
);

-- Indexing for database Optimization

-- Exams and Questions indexes
CREATE INDEX idxQuestionExam ON Question(ExamID);
CREATE INDEX idxQuestionClassificationContent ON QuestionClassification(ContentAreaID);
CREATE INDEX idxQuestionOptionsQuestion ON QuestionOptions(QuestionID);
CREATE INDEX idxQuestionOptionsCorrect ON QuestionOptions(CorrectAnswer);

-- Student Information and Login indexes
CREATE INDEX idxLoginInfoUsername ON LoginInfo(Username);
CREATE INDEX idxStudentName ON Student(LastName, FirstName);
CREATE INDEX idxExtracurricularsStudent ON Extracurriculars(StudentID);
CREATE INDEX idxClerkshipStudent ON Clerkship(StudentID);
CREATE INDEX idxClerkshipDates ON Clerkship(StartDate, EndDate);

-- Exam Results and Performance indexes
CREATE INDEX idxExamResultsStudent ON ExamResults(StudentID);
CREATE INDEX idxExamResultsExam ON ExamResults(ExamID);
CREATE INDEX idxExamResultsClerkship ON ExamResults(ClerkshipID);
CREATE INDEX idxStudentQuestionPerfExam ON StudentQuestionPerformance(ExamResultsID);
CREATE INDEX idxStudentQuestionPerfQuestion ON StudentQuestionPerformance(QuestionID);

-- Graduation Status indexes
CREATE INDEX idxGraduationStatusStudent ON GraduationStatus(StudentID);
CREATE INDEX idxGraduationStatusYear ON GraduationStatus(GraduationYear);

-- Faculty and Class indexes
CREATE INDEX idxClassBlock ON Class(Block);
CREATE INDEX idxFacultyName ON Faculty(LastName, FirstName);
CREATE INDEX idxClassOfferingDates ON ClassOffering(DateTaught, Semester);
CREATE INDEX idxClassOfferingFaculty ON ClassOffering(FacultyID);

-- Enrollment and Grades indexes
CREATE INDEX idxEnrollmentRecordStudent ON EnrollmentRecord(StudentID);
CREATE INDEX idxEnrollmentRecordClass ON EnrollmentRecord(ClassOfferingID);
CREATE INDEX idxGradeClassificationClass ON GradeClassification(ClassOfferingID);
CREATE INDEX idxStudentGradeStudent ON StudentGrade(StudentID);